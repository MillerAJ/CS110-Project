
from pygame import *
from pygame.locals import *
import MainMenu
import GameWindow
import Health
import sys
from gamePad import *

#New Zero Fighting!

#Initializes fonts
font.init()

#Screen Resolution

SCREEN_WIDTH = 1000
SCREEN_HEIGHT = 600

#Makes Screen
#Remeber fullscreen
screen = display.set_mode((SCREEN_WIDTH,SCREEN_HEIGHT))

keepGoing = True
while keepGoing == True:

    #Defines initial values
    FPS = 60
    pushingPause = False

    #Load Spritesheet(s)

    zeroSpriteSheet = image.load("Zero Sprite Sheet.gif").convert_alpha()
    blueZeroSpriteSheet = image.load("Blue Zero Sprite Sheet.gif")\
    .convert_alpha()
    vegetaSpriteSheet = image.load("Vegeta Sprite Sheet.gif").convert_alpha()
    backgroundCheat = image.load("LaughingAnimuGirls.bmp").convert()
    bubble = image.load("bubble.png").convert_alpha()
    bubble = transform.scale(bubble,(74*3,65*3))
    player1WinText = image.load("Player1WinText.png").convert_alpha()
    player2WinText = image.load("Player2WinText.png").convert_alpha()

    #Create Surfaces
    player1Win = pygame.Surface((SCREEN_WIDTH, SCREEN_HEIGHT))
    player1Win.set_alpha(0)
    player1Win.blit(player1WinText,(200,150))
    player2Win = pygame.Surface((SCREEN_WIDTH, SCREEN_HEIGHT))
    player2Win.set_alpha(0)
    player2Win.blit(player2WinText,(200,150))
    
    #Class for creating Sprites
    class sprite:
        def __init__(self,name,spriteSheet,spriteLeft,spriteRight,spriteTop,\
            spriteBottom,scale,adjustX,adjustY):
            self.Name = name
            self.spriteSheet = spriteSheet
            self.Left = spriteLeft
            self.Right = spriteRight
            self.Top = spriteTop
            self.Bottom = spriteBottom
            self.Scale = scale
            self.Width = self.Right-self.Left
            self.Height = self.Bottom-self.Top
            self.spriteSheet.set_clip(Rect(self.Left,self.Top,self.Width,self.Height))
            self.Picture = self.spriteSheet.subsurface(self.spriteSheet.get_clip())
            self.ScaledWidth = self.Width * self.Scale
            self.ScaledHeight = self.Height * self.Scale
            self.Picture = transform.scale(self.Picture,\
                (self.ScaledWidth,self.ScaledHeight))
            self.adjustX = adjustX
            self.adjustY = adjustY

        ##Narrative: Makes sprite Scale times bigger
        ##Preconditions: Initialize scale, width, height, and picture
        ##Post conditions: Sprite is enlarged or minimized based on preferences
        def scale(self,scale):
            self.Scale = scale
            self.ScaledWidth = self.Width * self.Scale
            self.ScaledHeight = self.Height * self.Scale
            self.Picture = transform.scale(self.Picture,\
                (self.ScaledWidth,self.ScaledHeight))


    #Creates sprites

            #Zero
    zeroStand = sprite("zeroStand",zeroSpriteSheet,5,48,5,52,4,0,0)

    zeroWalkStart1 = sprite("zeroWalkStart1",zeroSpriteSheet,3,39,165,210,\
        4,0,0)
    zeroWalkStart2 = sprite("zeroWalkStart2",zeroSpriteSheet,49,87,164,210,\
        4,0,0)

    zeroWalk1 = sprite("zeroWalk1",zeroSpriteSheet,93,144,164,208,4,0,0)
    zeroWalk2 = sprite("zeroWalk2",zeroSpriteSheet,151,201,165,210,4,0,0)
    zeroWalk3 = sprite("zeroWalk3",zeroSpriteSheet,206,254,164,210,4,0,0)
    zeroWalk4 = sprite("zeroWalk4",zeroSpriteSheet,261,307,163,210,4,0,0)
    zeroWalk5 = sprite("zeroWalk5",zeroSpriteSheet,315,359,161,209,4,0,0)
    zeroWalk6 = sprite("zeroWalk6",zeroSpriteSheet,367,407,161,209,4,0,0)
    zeroWalk7 = sprite("zeroWalk7",zeroSpriteSheet,419,464,164,211,4,0,0)
    zeroWalk8 = sprite("zeroWalk8",zeroSpriteSheet,475,524,165,210,4,0,0)
    zeroWalk9 = sprite("zeroWalk9",zeroSpriteSheet,531,576,166,212,4,0,0)
    zeroWalk10 = sprite("zeroWalk10",zeroSpriteSheet,583,633,165,212,4,0,0)
    zeroWalk11 = sprite("zeroWalk11",zeroSpriteSheet,640,686,164,212,4,0,0)
    zeroWalk12 = sprite("zeroWalk12",zeroSpriteSheet,695,738,163,212,4,0,0)
    zeroWalk13 = sprite("zeroWalk13",zeroSpriteSheet,745,787,163,212,4,0,0)
    zeroWalk14 = sprite("zeroWalk14",zeroSpriteSheet,795,840,164,212,4,0,0)

    zeroJump1 = sprite("zeroJump1",zeroSpriteSheet,14,53,89,137,4,0,0)
    zeroJump2 = sprite("zeroJump2",zeroSpriteSheet,59,103,85,141,4,0,0)
    zeroJump3 = sprite("zeroJump3",zeroSpriteSheet,110,153,85,141,4,0,0)
    zeroJump4 = sprite("zeroJump4",zeroSpriteSheet,163,206,84,141,4,0,0)
    zeroJump5 = sprite("zeroJump5",zeroSpriteSheet,213,256,84,140,4,0,0)
    zeroJump6 = sprite("zeroJump6",zeroSpriteSheet,263,303,84,136,4,0,0)
    zeroJump7 = sprite("zeroJump7",zeroSpriteSheet,308,348,84,139,4,0,0)
    zeroJump8 = sprite("zeroJump8",zeroSpriteSheet,353,389,84,148,4,0,0)
    zeroJump9 = sprite("zeroJump9",zeroSpriteSheet,398,433,75,152,4,0,0)
    zeroJump10 = sprite("zeroJump10",zeroSpriteSheet,443,478,72,151,4,0,0)
    zeroJump11 = sprite("zeroJump11",zeroSpriteSheet,488,528,90,149,4,0,0)

    zeroDash1 = sprite("zeroDash1",zeroSpriteSheet,541,611,104,149,4,-5,0)
    zeroDash2 = sprite("zeroDash2",zeroSpriteSheet,620,727,112,148,4,-5,0)
    zeroDash3 = sprite("zeroDash3",zeroSpriteSheet,734,865,112,150,4,-5,0)

    zeroSword1 = sprite("zeroSword1",zeroSpriteSheet,7,46,298,344,4,0,0)
    zeroSword2 = sprite("zeroSword2",zeroSpriteSheet,52,98,294,344,4,-6,0)
    zeroSword3 = sprite("zeroSword3",zeroSpriteSheet,102,151,283,346,4,-3,-4)
    zeroSword4 = sprite("zeroSword4",zeroSpriteSheet,157,235,283,346,4,-3,-17)
    zeroSword5 = sprite("zeroSword5",zeroSpriteSheet,242,329,283,343,4,-5,-15)
    zeroSword6 = sprite("zeroSword6",zeroSpriteSheet,337,428,295,343,4,-9,-6)
    zeroSword7 = sprite("zeroSword7",zeroSpriteSheet,437,520,294,343,4,-2,-6)
    zeroSword8 = sprite("zeroSword8",zeroSpriteSheet,527,597,298,343,4,-1,0)
    zeroSword9 = sprite("zeroSword9",zeroSpriteSheet,607,666,298,342,4,0,0)
    zeroSword10 = sprite("zeroSword10",zeroSpriteSheet,677,729,297,342,4,0,0)
    zeroSword11 = sprite("zeroSword11",zeroSpriteSheet,737,782,297,342,4,0,0)
    
    
    blueZeroStand = sprite("blueZeroStand",blueZeroSpriteSheet,5,48,5,52,4,0,0)

    blueZeroWalkStart1 = sprite("blueZeroWalkStart1",blueZeroSpriteSheet,\
        3,39,165,210,4,0,0)
    blueZeroWalkStart2 = sprite("blueZeroWalkStart2",blueZeroSpriteSheet,\
        49,87,164,210,4,0,0)

    blueZeroWalk1 = sprite("blueZeroWalk1",blueZeroSpriteSheet,93,144,164,\
        208,4,0,0)
    blueZeroWalk2 = sprite("blueZeroWalk2",blueZeroSpriteSheet,151,201,165,\
        210,4,0,0)
    blueZeroWalk3 = sprite("blueZeroWalk3",blueZeroSpriteSheet,206,254,164,\
        210,4,0,0)
    blueZeroWalk4 = sprite("blueZeroWalk4",blueZeroSpriteSheet,261,307,163,\
        210,4,0,0)
    blueZeroWalk5 = sprite("blueZeroWalk5",blueZeroSpriteSheet,315,359,161,\
        209,4,0,0)
    blueZeroWalk6 = sprite("blueZeroWalk6",blueZeroSpriteSheet,367,407,161,\
        209,4,0,0)
    blueZeroWalk7 = sprite("blueZeroWalk7",blueZeroSpriteSheet,419,464,164,\
        211,4,0,0)
    blueZeroWalk8 = sprite("blueZeroWalk8",blueZeroSpriteSheet,475,524,165,\
        210,4,0,0)
    blueZeroWalk9 = sprite("blueZeroWalk9",blueZeroSpriteSheet,531,576,166,\
        212,4,0,0)
    blueZeroWalk10 = sprite("blueZeroWalk10",blueZeroSpriteSheet,583,633,165,\
        212,4,0,0)
    blueZeroWalk11 = sprite("blueZeroWalk11",blueZeroSpriteSheet,640,686,164,\
        212,4,0,0)
    blueZeroWalk12 = sprite("blueZeroWalk12",blueZeroSpriteSheet,695,738,163,\
        212,4,0,0)
    blueZeroWalk13 = sprite("blueZeroWalk13",blueZeroSpriteSheet,745,787,163,\
        212,4,0,0)
    blueZeroWalk14 = sprite("blueZeroWalk14",blueZeroSpriteSheet,795,840,164,\
        212,4,0,0)

    blueZeroJump1 = sprite("blueZeroJump1",blueZeroSpriteSheet,14,53,89,137,\
        4,0,0)
    blueZeroJump2 = sprite("blueZeroJump2",blueZeroSpriteSheet,59,103,85,141,\
        4,0,0)
    blueZeroJump3 = sprite("blueZeroJump3",blueZeroSpriteSheet,110,153,85,141,\
        4,0,0)
    blueZeroJump4 = sprite("blueZeroJump4",blueZeroSpriteSheet,163,206,84,141,\
        4,0,0)
    blueZeroJump5 = sprite("blueZeroJump5",blueZeroSpriteSheet,213,256,84,140,\
        4,0,0)
    blueZeroJump6 = sprite("blueZeroJump6",blueZeroSpriteSheet,263,303,84,136,\
        4,0,0)
    blueZeroJump7 = sprite("blueZeroJump7",blueZeroSpriteSheet,308,348,84,139,\
        4,0,0)
    blueZeroJump8 = sprite("blueZeroJump8",blueZeroSpriteSheet,353,389,84,148,\
        4,0,0)
    blueZeroJump9 = sprite("blueZeroJump9",blueZeroSpriteSheet,398,433,75,152,\
        4,0,0)
    blueZeroJump10 = sprite("blueZeroJump10",blueZeroSpriteSheet,443,478,72,\
        151,4,0,0)
    blueZeroJump11 = sprite("blueZeroJump11",blueZeroSpriteSheet,488,528,90,\
        149,4,0,0)

    blueZeroDash1 = sprite("blueZeroDash1",blueZeroSpriteSheet,541,611,104,\
        149,4,-5,0)
    blueZeroDash2 = sprite("blueZeroDash2",blueZeroSpriteSheet,620,727,112,\
        148,4,-5,0)
    blueZeroDash3 = sprite("blueZeroDash3",blueZeroSpriteSheet,734,865,112,\
        150,4,-5,0)

    blueZeroSword1 = sprite("blueZeroSword1",blueZeroSpriteSheet,7,46,298,\
        344,4,0,0)
    blueZeroSword2 = sprite("blueZeroSword2",blueZeroSpriteSheet,52,98,294,\
        344,4,-6,0)
    blueZeroSword3 = sprite("blueZeroSword3",blueZeroSpriteSheet,102,151,283,\
        346,4,-3,-4)
    blueZeroSword4 = sprite("blueZeroSword4",blueZeroSpriteSheet,157,235,283,\
        346,4,-3,-17)
    blueZeroSword5 = sprite("blueZeroSword5",blueZeroSpriteSheet,242,329,283,\
        343,4,-5,-15)
    blueZeroSword6 = sprite("blueZeroSword6",blueZeroSpriteSheet,337,428,295,\
        343,4,-9,-6)
    blueZeroSword7 = sprite("blueZeroSword7",blueZeroSpriteSheet,437,520,294,\
        343,4,-2,-6)
    blueZeroSword8 = sprite("blueZeroSword8",blueZeroSpriteSheet,527,597,298,\
        343,4,-1,0)
    blueZeroSword9 = sprite("blueZeroSword9",blueZeroSpriteSheet,607,666,298,\
        342,4,0,0)
    blueZeroSword10 = sprite("blueZeroSword10",blueZeroSpriteSheet,677,729,\
        297,342,4,0,0)
    blueZeroSword11 = sprite("blueZeroSword11",blueZeroSpriteSheet,737,782,\
        297,342,4,0,0)

        #Vegeta
    vegetaStand1 = sprite("vegetaStand1",vegetaSpriteSheet,4,47,2,77,3,0,0)
    vegetaStand2 = sprite("vegetaStand2",vegetaSpriteSheet,53,96,3,79,3,0,0)
    vegetaDash = sprite("vegetaDash",vegetaSpriteSheet,51,110,255,321,3,0,0)

        #SpriteList

            #Zero
    zeroIdleAnimList = [zeroStand]
    zeroWalkAnimList = [zeroWalk3,zeroWalk4,zeroWalk5,zeroWalk6,zeroWalk7,\
                        zeroWalk8,zeroWalk9,zeroWalk10,zeroWalk11,zeroWalk12,\
                        zeroWalk13,zeroWalk14]
    zeroStartStopAnimList = [zeroWalk1,zeroWalk2]
    zeroJumpAnimList = [zeroJump1,zeroJump2,zeroJump3,zeroJump4,zeroJump5,\
                        zeroJump6,zeroJump7,zeroJump8,zeroJump9,zeroJump10,\
                        zeroJump11]
    zeroDashAnimList = [zeroDash1,zeroDash2,zeroDash3]
    zeroAttack1List = [zeroSword1,zeroSword2,zeroSword3,zeroSword4,zeroSword5,\
                        zeroSword6,zeroSword7,zeroSword8,zeroSword9,\
                        zeroSword10,zeroSword11]
    
    blueZeroIdleAnimList = [blueZeroStand]
    blueZeroWalkAnimList = [blueZeroWalk3,blueZeroWalk4,blueZeroWalk5,\
                            blueZeroWalk6,blueZeroWalk7,blueZeroWalk8,\
                            blueZeroWalk9,blueZeroWalk10,blueZeroWalk11,\
                            blueZeroWalk12,blueZeroWalk13,blueZeroWalk14]
    blueZeroStartStopAnimList = [blueZeroWalk1,blueZeroWalk2]
    blueZeroJumpAnimList = [blueZeroJump1,blueZeroJump2,blueZeroJump3,\
                            blueZeroJump4,blueZeroJump5,blueZeroJump6,\
                            blueZeroJump7,blueZeroJump8,\
                            blueZeroJump9,blueZeroJump10,blueZeroJump11]
    blueZeroDashAnimList = [blueZeroDash1,blueZeroDash2,blueZeroDash3]
    blueZeroAttack1List = [blueZeroSword1,blueZeroSword2,blueZeroSword3,\
                            blueZeroSword4,blueZeroSword5,blueZeroSword6,\
                            blueZeroSword7,blueZeroSword8,blueZeroSword9,\
                            blueZeroSword10,blueZeroSword11]

            #Vegeta
    vegetaIdleAnimList = [vegetaStand1,vegetaStand2]
    vegetaWalkAnimList = [vegetaStand1]
    vegetaStartStopAnimList = []
    vegetaJumpAnimList = []
    vegetaDashAnimList = [vegetaDash]

    #Class for creating chatacters
    class Character:
        def __init__(self,idleAnimList=[],walkAnimList=[],\
                     startStopAnimList=[],\
                     jumpAnimList=[],dashAnimList=[],attack1AnimList=[],\
                     drawX=0,sprite=zeroStand,animTimer=5,walkAnimCtr=0,\
                     walkAnimCount=0,idleAnimCtr=0,idleAnimCount=0,\
                     startStopAnimCtr=0,startStopAnimCount=0,\
                     jumpAnimCtr=0,jumpAnimCount=0,dashAnimCtr=0,\
                     dashAnimCount=0,attack1AnimCtr=0,attack1AnimCount=0,\
                     face="right",widestSprite=zeroStand,\
                     tallestSprite=zeroStand,speed=1,maxSpeed=20,rightSpeed=0,\
                     leftSpeed=0,upSpeed=0,downSpeed=0,x=200,y=200,\
                     jumps=1,jumpHeight=20,canLeaveScreen=True,\
                     isOffBottom=False,isOffTop=False,isOffRight=False,\
                     isOffLeft=False,isOffScreen=False,\
                     status="idle",isOn="nothing",attackTime=5,\
                     name="Zero",speedStat=1,power=0,maxPower=100,\
                     damageStat=0,isCrouched=False):
        
            #Sprite Lists
            self.idleAnimList = idleAnimList
            self.walkAnimList = walkAnimList
            self.startStopAnimList = startStopAnimList
            self.jumpAnimList = jumpAnimList
            self.dashAnimList = dashAnimList
            self.attack1AnimList = attack1AnimList

            #Animation
            self.drawX = drawX
            self.sprite = sprite
            self.animTimer = animTimer
            self.walkAnimCtr = walkAnimCtr
            self.walkAnimCount = walkAnimCount
            self.idleAnimCtr = idleAnimCtr
            self.idleAnimCount = idleAnimCount
            self.startStopAnimCtr = startStopAnimCtr
            self.startStopAnimCount = startStopAnimCount
            self.jumpAnimCtr = jumpAnimCtr
            self.jumpAnimCount = jumpAnimCount
            self.dashAnimCtr = dashAnimCtr
            self.dashAnimCount = dashAnimCount
            self.attack1AnimCtr = attack1AnimCtr
            self.attack1AnimCount = attack1AnimCount
            self.face = face
            self.widestSprite = widestSprite
            self.tallestSprite = tallestSprite

            #Movement
            self.speed = 1
            self.maxSpeed = maxSpeed
            self.rightSpeed = rightSpeed
            self.leftSpeed = leftSpeed
            self.upSpeed = upSpeed
            self.downSpeed = downSpeed
            self.dy = (self.upSpeed - self.downSpeed)
            self.dx = (self.leftSpeed - self.rightSpeed)
            self.x = x
            self.y = y
            self.jumps = jumps
            self.jumpsLeft = self.jumps
            self.jumpHeight = jumpHeight
            self.canLeaveScreen = canLeaveScreen
            self.isOffBottom = isOffBottom
            self.isOffTop = isOffTop
            self.isOffRight = isOffRight
            self.isOffLeft = isOffLeft
            self.isOffScreen = isOffScreen
            self.status = status
            self.isOn = isOn
            self.attackTime = attackTime
            self.attackTimeLeft = 0

            #Stats
            self.name = name
            self.speedStat = speedStat
            self.power = power
            self.maxPower = maxPower
            self.damageStat = damageStat
            self.isCrouched = isCrouched
            
        ##Narrative: Character will be able to move right
        ##Preconditions: Speed attributes must be initialized
        ##Post conditions: Character is able to walk right based
        ## on their unique walk speed
        def moveRight(self):
            if self.rightSpeed < self.maxSpeed:
                self.rightSpeed += (self.speedStat * self.speed)

        ##Narrative: Character will be able to move left
        ##Preconditions: Speed attributes must be initialized
        ##Post conditions: Character is able to walk left based on
        ## their unique walk speed
        def moveLeft(self):
            if self.leftSpeed < self.maxSpeed:
                self.leftSpeed += (self.speedStat * self.speed)

        ##Narrative: Character is able to jump
        ##Preconditions: Initialize jump attributes
        ##Post conditions: Character is able to jump up to two times
        def jump(self):
            if self.isOn == "ground" or self.jumpsLeft > 0:
                self.jumpAnimCount = 0
                self.downSpeed = 0
                self.upSpeed = self.jumpHeight
                self.y -= 1
                self.jumpsLeft -= 1
                self.isOn = "nothing"

        ##Narrative:Character is able to dash left based on character direction
        ##Preconditions: Initialize speed, status, and power
        ##Post conditions: 25 power is used to dash left
        def leftDash(self):
            if self.status != "jumping" and self.power >= 25:
                self.power -= 25
                self.rightSpeed = 0
                self.upSpeed = 0
                self.downSpeed = 0
                self.status = "dashing"
                self.leftSpeed = 40

        ##Narrative:Character is able to dash right basedon character direction
        ##Preconditions: Initialize speed, status, and power
        ##Post conditions: 25 power is used to dash right
        def rightDash(self):
            if self.status != "jumping" and self.power >= 25:
                self.power -= 25
                self.rightSpeed = 0
                self.upSpeed = 0
                self.downSpeed = 0
                self.status = "dashing"
                self.rightSpeed = 40

        ##Narrative: Character is able to attack
        ##Preconditions: Attack attributes must be initialized
        ##Post conditions: Character attacks, 25 power is used
        def attack(self):
            if self.power - 25 >= 0 and self.attackTimeLeft <= \
            self.attackTime/3:
                if self.status != "dashing":
                    self.power -= 25
                    self.status = "attacking"
                    self.attackTimeLeft = self.attackTime
                    self.attack1AnimCtr = 0
                    self.attack1AnimCount = 0

        ##Narrative: Gravity allows for user to fall back into place
        ##Preconditions: Initialize up and down speeds
        ##Post conditions: Characters lands after jumping
        def gravity(self):
            if self.isOn == "nothing" and self.status != "dashing":
                if self.downSpeed < 20:
                    self.downSpeed += 1    
                elif self.upSpeed > 0:
                    self.upSpeed -= 1

        ##Narrative: Slows the player down after a key is left go of
        ##Preconditions: Initialize speed attributes
        ##Post conditions: Rules for being on the ground or in the air are made
        def slowDown(self):
            #Rules for on ground or in air
            for item in playerList:
                if self.isOn == "ground" or self.isOn == "nothing":
                    if item.pushingRight == False:
                        if self.rightSpeed > 0:
                            self.rightSpeed -= 1
                    if item.pushingLeft == False:
                        if self.leftSpeed > 0:
                            self.leftSpeed -=1

        ##Narrative: Makes the character replenish power every tick
        ##Preconditions: Initialize power and make full power 100
        ##Post conditions: Power is replenished 
        def generatePower(self):
            if self.power + 0. <= self.maxPower:
                self.power += 0.5
            else:
                self.power = 100
                
        ##Narrative: The player's status is updated depending on the key 
        ## or button pressed
        ##Preconditions: Initialized attributes concerning character movement
        ##Post conditions: Status is updated 
        def updateStatus(self):
            if self.attackTimeLeft > 0:
                self.attackTimeLeft -= 1
                self.status = "attacking"
            elif self.isOn == "nothing":
                self.status = "jumping"
            elif (self.rightSpeed == 0 and self.leftSpeed == 0) or \
                self.rightSpeed == self.leftSpeed:
                self.status = "idle"
            elif self.status != "dashing":
                if (self.rightSpeed != 0 or self.leftSpeed != 0) and \
                    self.rightSpeed != self.leftSpeed:
                    self.status = "walking"

        ##Narrative: Updates where the character is on
        ##Preconditions: Ground attribute
        ##Post conditions: Status is updated
        def updateIsOn(self):
            if self.isOn != "ground":
                if self.y > SCREEN_HEIGHT - self.tallestSprite.ScaledHeight:
                    self.isOn = "ground"
                    self.downSpeed = 0
                    self.upSpeed = 0
                    self.jumpsLeft = self.jumps

        ##Narrative: Handles all animation for characters
        ##Preconditions: Sprites and their attributes
        ##Post conditions: Character is animated
        def animation(self):
            
            #Walking Animation
            if self.status == "walking":

                #Start/Stop Animations
                if self.startStopAnimCount != (len(self.startStopAnimList)):
                    self.sprite=self.startStopAnimList[self.startStopAnimCount]
                    self.startStopAnimCtr += 1
                    if self.startStopAnimCtr == self.animTimer:
                        self.startStopAnimCount += 1
                        self.startStopAnimCtr = 0
                else:
                    self.sprite = self.walkAnimList[self.walkAnimCount]
                    self.walkAnimCtr += 1
                    if self.walkAnimCtr == self.animTimer:
                        self.walkAnimCount += 1
                        if self.walkAnimCount > (len(self.walkAnimList) - 1):
                            self.walkAnimCount = 0
                        self.walkAnimCtr = 0

            #Idle Animation
            elif self.status == "idle":
                self.startStopAnimCount = 0
                self.sprite = self.idleAnimList[self.idleAnimCount]
                self.idleAnimCtr += 1
                if self.idleAnimCtr/2 == self.animTimer:
                    self.idleAnimCount += 1
                    if self.idleAnimCount > (len(self.idleAnimList) - 1):
                        self.idleAnimCount = 0
                    self.idleAnimCtr = 0

            #Jumping Animation
            elif self.status == "jumping":
                self.sprite = self.jumpAnimList[self.jumpAnimCount]
                self.jumpAnimCtr += 1
                if self.jumpAnimCtr == self.animTimer:
                    self.jumpAnimCount += 1
                    if self.jumpAnimCount > (len(self.jumpAnimList) - 1):
                        self.jumpAnimCount -= 1
                    self.jumpAnimCtr = 0

            #Dashing Animation
            elif self.status == "dashing":
                self.sprite = self.dashAnimList[self.dashAnimCount]
                self.dashAnimCtr += 1
                if self.dashAnimCtr == self.animTimer*2:
                    self.dashAnimCount += 1
                    if self.dashAnimCount > (len(self.dashAnimList) - 1):
                        self.dashAnimCount -= 1
                    self.dashAnimCtr = 0

            #Attacking Animation
            elif self.status == "attacking":
                self.sprite = self.attack1AnimList[self.attack1AnimCount]
                self.attack1AnimCtr += 1
                if self.attack1AnimCtr == self.animTimer:
                    self.attack1AnimCount += 1
                    if self.attack1AnimCount > (len(self.attack1AnimList) - 1):
                        self.attack1AnimCount -= 1
                    self.attack1AnimCtr = 0

            if self.status != "dashing":
                self.dashAnimCount = 0
                self.dashAnimCtr = 0
                    
        ##Narrative: Handles possibility of character walking off the screen
        ##Preconditions: Window height and width
        ##Post conditions:Character remains within the boundaries of the window
        def updateIsOffScreen(self):

            #Right of screen
            if (self.x + self.widestSprite.ScaledWidth)+self.dx>= SCREEN_WIDTH:
                self.isOffRight = True
            else:
                self.isOffRight = False

            #Left of screen
            if self.x + self.dx <= 0:
                self.isOffLeft = True
            else:
                self.isOffLeft = False

            #Top of screen
            if self.y + self.dy < 0:
                self.isOffTop = True
            else:
                self.isOffTop = False

            #Bottom of screen
            if (self.y + self.tallestSprite.ScaledHeight) + self.dy > \
                SCREEN_HEIGHT:
                self.isOffBottom = True
            else:
                self.isOffBottom = False

            #Update isOffSceen
            if self.isOffRight == True or self.isOffLeft == True or \
                self.isOffTop == True or self.isOffBottom == True:
                self.isOffScreen = True
            else:
                self.isOffScreen = False
                
        ##Narrative: Updates the coordinates of the character
        ##Preconditions: Coordinate attributes
        ##Post conditions: Collision is updated and accounted for
        def updateCoords(self):

            #Updates whether or not the player is off the screen
            self.updateIsOffScreen()
            
            #Update Cracters Colliding
            system.updateCharacterCollision()

            #Updates dx and dy
            self.dx = (self.rightSpeed - self.leftSpeed)
            self.dy = (self.upSpeed - self.downSpeed)

            #If character can go off the screen
            if self.canLeaveScreen == True:
                self.x += self.dx
                self.y += self.dy

            #If character can't go off the screen
            else:
                if self.isOffScreen == True:
                    if self.isOffRight == True:
                        self.rightSpeed = 0
                    elif self.isOffLeft == True:
                        self.leftSpeed = 0
                    if self.isOffBottom == True:
                        self.downSpeed  = 0
                                
                #Updates dx and dy
                self.dx = (self.rightSpeed - self.leftSpeed)
                self.dy = (self.downSpeed - self.upSpeed)

                self.x += self.dx
                self.y += self.dy

        ##Narrative: Draws character onto the screen using their sprite images
        ##Preconditions: Character sprites
        ##Post conditions:Character is drawn on the specified window coordinate
        def draw(self):          
            if self.face == "right":
                screen.blit(self.sprite.Picture,(self.x+self.sprite.adjustX,\
                    self.y+self.sprite.adjustY))
            elif self.face == "left":
                if self.sprite.adjustX != 0:
                    self.drawX = self.x - 100
                else:
                    self.drawX = self.x
                screen.blit(transform.flip((self.sprite.Picture),True,False),\
                                    (self.drawX,self.y+self.sprite.adjustY))
            if self.isCrouched == True:
              if self.power - 4 >= 0:
                self.power -= 0.50
                screen.blit(bubble,(self.x,self.y))
              else:
                self.isCrouched = False
                self.power = 0
                
        ##Narrative: Runs through all character updates
        ##Preconditions: Attributes that need to be updated
        ##Post conditions: Character is updated
        def update(self):
          if pushingPause == False:
            self.generatePower()
            self.slowDown()
            self.updateStatus()
            system.updateFace()
            self.updateIsOn()
            self.gravity()
            self.updateCoords()
            self.animation()
          self.draw()
          if pushingPause == False:
            system.damage()

        def __str__(self):
            return("\n\nSprite Lists:"+\
                   "\nidleAnimList: "+str(self.idleAnimList)+\
                   "\nwalkAnimList: "+str(self.walkAnimList)+\
                   "\nstartStopAnimList: "+str(self.startStopAnimList)+\
                   "\njumpAnimList: "+str(self.jumpAnimList)+\

                   "\n\nAnimation"+\
                   "\nanimTimer: "+str(self.animTimer)+\
                   "\nwalkAnimCtr: "+str(self.walkAnimCtr)+\
                   "\nwalkAnimCount: "+str(self.walkAnimCount)+\
                   "\nidleAnimCtr: "+str(self.idleAnimCtr)+\
                   "\nidleAnimCount: "+str(self.idleAnimCount)+\
                   "\njumpAnimCtr: "+str(self.jumpAnimCtr)+\
                   "\njumpAnimCount: "+str(self.jumpAnimCount)+\
                   "\ndashAnimCtr: "+str(self.dashAnimCtr)+\
                   "\ndashAnimCount: "+str(self.dashAnimCount)+\
                   "\nface: "+str(self.face)+\
                   "\nwidestSprite: "+str(self.widestSprite)+\
                   "\ntallestSprite: "+str(self.tallestSprite)+\
                   "\ncurrentSprite: "+str(self.sprite.Name)+\

                   "\n\nMovement"+\
                   "\nspeed: "+str(self.speed)+\
                   "\nmaxSpeed: "+str(self.maxSpeed)+\
                   "\nrightSpeed: "+str(self.rightSpeed)+\
                   "\nleftSpeed: "+str(self.leftSpeed)+\
                   "\nupSpeed: "+str(self.upSpeed)+\
                   "\ndownSpeed: "+str(self.downSpeed)+\
                   "\ndy: "+str(self.dy)+\
                   "\ndx: "+str(self.dx)+\
                   "\nx: "+str(self.x)+\
                   "\ny: "+str(self.y)+\
                   "\njumps: "+str(self.jumps)+\
                   "\njumpsLeft: "+str(self.jumpsLeft)+\
                   "\ncanLeaveScreen: "+str(self.canLeaveScreen)+\
                   "\nisOffBottom: "+str(self.isOffBottom)+\
                   "\nisOffTop: "+str(self.isOffTop)+\
                   "\nisOffRight: "+str(self.isOffRight)+\
                   "\nisOffLeft: "+str(self.isOffLeft)+\
                   "\nstatus: "+str(self.status)+\
                   "\nisOn: "+str(self.isOn)+\

                   "\n\nStats"+\
                   "\nname: "+str(self.name))

    #Creates Player(s)
    playerList = []
    
    zero1 = Character(zeroIdleAnimList,zeroWalkAnimList,\
                       zeroStartStopAnimList,zeroJumpAnimList,\
                       zeroDashAnimList,zeroAttack1List,\
                       0,zeroWalk1,5,0,0,0,0,0,0,0,0,0,0,0,0,"right",\
                       zeroWalk1,zeroWalk12,\
                       1,20,0,0,0,0,200,SCREEN_HEIGHT-zeroWalk12.ScaledHeight,\
                       2,23,False,False,False,False,False,False,"idle",\
                       "ground",25,"zero",5,100,100.0,2.0,False)

    zero2 = Character(blueZeroIdleAnimList,blueZeroWalkAnimList,\
                       blueZeroStartStopAnimList,blueZeroJumpAnimList,\
                       blueZeroDashAnimList,blueZeroAttack1List,\
                       0,blueZeroWalk1,5,0,0,0,0,0,0,0,0,0,0,0,0,"left",\
                       blueZeroWalk1,blueZeroWalk12,\
                       1,20,0,0,0,0,SCREEN_WIDTH-200,\
                       SCREEN_HEIGHT-blueZeroWalk12.ScaledHeight,\
                       2,23,False,False,False,False,False,False,"idle",\
                       "ground",25,"blueZero",5,100,100.0,1.0,False)

    #Player class
    class Player(Character):

        def __init__(self,number,character="",pushingRight=False,\
                    pushingLeft=False,pushingUp=False,pushingDown=False,\
                    pushingRightDash=False,pushingLeftDash=False,pushingAttack1=False):
            self.number = number
            self.character = character
            self.pushingRight = pushingRight
            self.pushingLeft = pushingLeft
            self.pushingUp = pushingUp
            self.pushingDown = pushingDown
            self.pushingRightDash = pushingRightDash
            self.pushingLeftDash = pushingLeftDash
            self.pushingAttack1 = pushingAttack1

    #Creates Healthbar and Power Bar
    healthBar = Health.HealthBar()
    powerBar = Health.PowerBar()
    timer = Health.Timer()

    #System Class: handles all collisions and ui
    class System:

        def __init__(self,fontList=["Digital Desolation",24]):
            self.fontList = fontList
            self.defaultFont = font.SysFont(self.fontList[0],self.fontList[1])
            self.alphSurface = 0
            self.alphaText = 0
            self.mainLoop = True
            self.result = "none"

        ##Narrative: Draws text of player 1 and player 2 above their head
        ##Preconditions: Player 1 and Player 2 are drawn to screen
        ##Post conditions: Blits the text to the player's head
        def updateHalo(self):
            for item in playerList:
                screen.blit(self.defaultFont.render("Player "+str(item.number),\
                    100,(255,255,255)),(item.character.x+50,item.character.y-25))

        ##Narrative: Updates the direction the character is facing 
        ##Preconditions: The character for Player 1 and Player 2
        ##Post conditions: Character direction is changed depending 
        ## on their side of the screen
        def updateFace(self):
            if player1.character.x > player2.character.x:
                player1.character.face = "left"
                player2.character.face = "right"
            else:
                player1.character.face = "right"
                player2.character.face = "left"

        ##Narrative: Damage calculator
        ##Preconditions: Character attack sprites such as punches or kicks
        ##Post conditions: Damage is inflicted; if player is blocking, 
        ## turn damage into weaker "chip" damage
        def damage(self):
            if player1.character.attackTimeLeft > 0:
                damageDone = player1.character.damageStat
                if player2.character.isCrouched == True:
                    damageDone *= .1
                if player1.character.face == "right":
                    if player1.character.x+\
                    player1.character.sprite.ScaledWidth > \
                    player2.character.x and player1.character.y \
                    + player1.character.sprite.ScaledHeight + \
                    player1.character.dy > player2.character.y and \
                    player1.character.y + player1.character.dy < \
                    player2.character.y + \
                    player2.character.sprite.ScaledHeight:
                        healthBar.player2Dam(damageDone)
                        player2.character.rightSpeed += 2
                elif player1.character.face == "left":
                    if player1.character.drawX < player2.character.x+\
                    player2.character.sprite.ScaledWidth and \
                    player1.character.y + \
                    player1.character.sprite.ScaledHeight + \
                    player1.character.dy > player2.character.y and \
                    player1.character.y + player1.character.dy < \
                    player2.character.y + \
                    player2.character.sprite.ScaledHeight:
                        healthBar.player2Dam(damageDone)
                        player2.character.leftSpeed += 2
            if player2.character.attackTimeLeft > 0:
                damageDone = player2.character.damageStat
                if player1.character.isCrouched == True:
                    damageDone *= .1
                if player2.character.face == "right":
                    if player2.character.x+\
                    player2.character.sprite.ScaledWidth > \
                    player1.character.x and player2.character.y \
                    + player2.character.sprite.ScaledHeight + \
                    player2.character.dy > player1.character.y and \
                    player2.character.y + player2.character.dy < \
                    player1.character.y + \
                    player1.character.sprite.ScaledHeight:
                        healthBar.player1Dam(damageDone)
                        player1.character.rightSpeed += 2
                elif player2.character.face == "left":
                    if player2.character.drawX < \
                    player1.character.x+player1.character.sprite.ScaledWidth\
                     and player2.character.y + \
                     player2.character.sprite.ScaledHeight + \
                     player2.character.dy > player1.character.y and \
                     player2.character.y + player2.character.dy < \
                     player1.character.y + \
                     player1.character.sprite.ScaledHeight:
                        healthBar.player1Dam(damageDone)
                        player1.character.leftSpeed += 2

        ##Narrative: Updates character collision
        ##Preconditions: Player 1 and Player 2 coordinates
        ##Post conditions: Sprites don't phase through each other
        def updateCharacterCollision(self):
            if player1.character.x + player1.character.sprite.ScaledWidth\
                + player1.character.dx > player2.character.x and \
                player1.character.x + player1.character.dx < player2.character.x\
                + player2.character.sprite.ScaledWidth:
                if player1.character.y + player1.character.sprite.ScaledHeight\
                    + player1.character.dy > player2.character.y and \
                    player1.character.y + player1.character.dy < \
                    player2.character.y + player2.character.sprite.ScaledHeight: 
                    if player1.character.face == "right":
                      player1.character.rightSpeed = 0
                    if player1.character.face == "left":
                      player1.character.leftSpeed = 0
            if player2.character.x + player2.character.sprite.ScaledWidth\
                + player2.character.dx > player1.character.x and \
                player2.character.x + player2.character.dx < \
                player1.character.x + player1.character.sprite.ScaledWidth:
                if player2.character.y + player2.character.sprite.ScaledHeight\
                    + player2.character.dy > player1.character.y and \
                    player2.character.y + player2.character.dy < \
                    player1.character.y + player1.character.sprite.ScaledHeight: 
                    if player2.character.face == "right":
                      player2.character.rightSpeed = 0
                    if player2.character.face == "left":
                      player2.character.leftSpeed = 0
        
        ##Narrative: Starts the beginning of the end of the game
        ##Preconditions: Player 1 or Player 2 health must be 0 or below
        ##Post conditions: Calls fadeToBlack() function
        def gameWinScreen(self):
          if healthBar.p2H < healthBar.p1H-200:
              self.result = "p1"
          else:
              self.result = "p2"
          system.fadeInText()

        ##Narrative: Creates the end game screen
        ##Preconditions: gameWinScreen() function calls this
        ##Post conditions: Increases opacity of winScreen to block main screen
        def fadeInText(self):
            if self.alphaText < 255:
                self.alphaText += 2.5
            else:
                time.delay(2000)
                self.mainLoop = False
            if self.result == "p1":
              player1Win.set_alpha(self.alphaText)
              screen.blit(player1Win,(0,0))
            elif self.result == "p2":
              player2Win.set_alpha(self.alphaText)
              screen.blit(player2Win,(0,0))

    #Creates System
    system = System()

    #Character Select
    player1Character = zero1
    player2Character = zero2

    #Creates Players
    player1 = Player(1,player1Character)
    player2 = Player(2,player2Character)
    playerList.append(player1)
    playerList.append(player2)

    MainMenu.mainMenu()
    mainLoop,x,y = MainMenu.stageMenu()
    stage = GameWindow.stageSelect(x,y)
    background = image.load(stage).convert()
    fullScreenBool = True
    mixer.music.stop()
    
    #Gets correct stage music
    if stage == "Stage1.jpg":
        stageSong = "CreepyWoodsMusic.ogg"
    elif stage == "Stage2.jpg":
        stageSong = "MortalCombatMusic.ogg"
    elif stage == "Stage3.jpg":
        stageSong = "HellMusic.ogg"
    elif stage == "Stage0.jpg":
        stageSong = "FullMoonMusic.ogg"
    elif stage == "Stage5.jpg":
        stageSong = "AbandonedTownMusic.ogg"
    elif stage == "Stage6.jpg":
        stageSong = "ChinatownMusic.ogg"
    elif stage == "Stage7.jpg":
        stageSong = "DigitalWorldMusic.ogg"
    elif stage == "Stage8.jpg":
        stageSong = "AncientSpringMusic.ogg"
    elif stage == "Stage9.jpg":
        stageSong = "RoadMusic.ogg"

    mixer.music.load(stageSong)
    mixer.music.play()

    #initializes game pads
    joystick1 = None
    joystick2 = None
    joystick_count = joystick.get_count()
    if joystick_count > 0:
        joystick1 = joystick.Joystick(0)
    if joystick_count > 1:
        joystick2 = joystick.Joystick(1)

    timer.stopWatch.reset()
    
    #Main Loop
    while system.mainLoop == True:
        gamePad(joystick1, joystick2)
        #Event Handler
        for Event in event.get():

            #Exit
            if Event.type == QUIT:
                quit()
                sys.exit()

            #Press Key
            elif Event.type == KEYDOWN:

                #A (Player 1)
                if Event.key == K_a:
                    player1.pushingLeft = True

                #D (Player 1)
                if Event.key == K_d:
                    player1.pushingRight = True

                #W (Player 1)
                if Event.key == K_w:
                    player1.pushingUp = True

                #S (Player 1)
                if Event.key == K_s:
                    player1.pushingDown = True

                #F (Player 1)
                if Event.key == K_f:
                    player1.pushingRightDash = True

                #CapsLock (Player 1)
                if Event.key == K_CAPSLOCK:
                    player1.pushingLeftDash = True

                #Squigly Key (Player 1)
                if Event.key == K_BACKQUOTE:
                    print(player1.character)

                #E (Player 1)
                if Event.key == K_e:
                    player1.pushingAttack1 = True

                #P
                if Event.key == K_p:
                    pushingPause = True

                if len(playerList) > 1:
                    
                    #Left (Player 2)
                    if Event.key == K_LEFT:
                        player2.pushingLeft = True

                    #Right (Player 2)
                    if Event.key == K_RIGHT:
                        player2.pushingRight = True

                    #Up (Player 2)
                    if Event.key == K_UP:
                        player2.pushingUp = True

                    #Down (Player 2)
                    if Event.key == K_DOWN:
                        player2.pushingDown = True

                    #Keypad 0 (Player 2)
                    if Event.key == K_KP0:
                        player2.pushingRightDash = True

                    #Right Ctrl (Player 2)
                    if Event.key == K_RCTRL:
                        player2.pushingLeftDash = True

                    #Home (Player 2)
                    if Event.key == K_HOME:
                        print(player2.character)

                    #Right Shift (Player 2)
                    if Event.key == K_RSHIFT:
                        player2.pushingAttack1 = True

            #Release Key
            elif Event.type == KEYUP:
                
                if Event.key == K_ESCAPE:
                    quit()
                    sys.exit()
                        
                if Event.key == K_t and fullScreenBool == True:
                    screen = display.set_mode((SCREEN_WIDTH,SCREEN_HEIGHT))
                    fullScreenBool = False

                elif Event.key == K_t and fullScreenBool == False:
                    screen = display.set_mode(\
                        (SCREEN_WIDTH,SCREEN_HEIGHT),FULLSCREEN)
                    fullScreenBool = True

                #A (Player 1)
                if Event.key == K_a:
                    player1.pushingLeft = False

                #D (Player 1)
                if Event.key == K_d:
                    player1.pushingRight = False

                #W (Player 1)
                if Event.key == K_w:
                    player1.pushingUp = False

                #S (Player 1)
                if Event.key == K_s:
                    player1.pushingDown = False

                #P
                if Event.key == K_p:
                  pushingPause = False

                if len(playerList) > 1:
                    
                    #Left (Player 2)
                    if Event.key == K_LEFT:
                        player2.pushingLeft = False

                    #Right (Player 2)
                    if Event.key == K_RIGHT:
                        player2.pushingRight = False

                    #Up (Player 2)
                    if Event.key == K_UP:
                        player2.pushingUp = False

                    #Down (Player 2)
                    if Event.key == K_DOWN:
                        player2.pushingDown = False

            #Game pad keys for moving
            elif Event.type == JOYAXISMOTION:
                
                if joyLeft(joystick1):
                    player1.pushingLeft = True

                if joyRight(joystick1):
                    player1.pushingRight = True

                if not joyLeft(joystick1):
                    player1.pushingLeft = False

                if not joyRight(joystick1):
                    player1.pushingRight = False

                if len(playerList) > 1 and joystick_count > 1:
                    
                    if joyLeft(joystick2):
                        player2.pushingLeft = True

                    if joyRight(joystick2):
                        player2.pushingRight = True

                    if not joyLeft(joystick2):
                        player2.pushingLeft = False

                    if not joyRight(joystick2):
                        player2.pushingRight = False

            elif Event.type == JOYBUTTONDOWN:

                if joystick1.get_button(0) == 1:
                    player1.pushingUp = True

                if joystick1.get_button(1) == 1:
                    player1.pushingDown = True

                if joystick1.get_button(2) == 1:
                    player1.pushingAttack1 = True

                if joystick1.get_button(4) == 1:
                    player1.pushingLeftDash = True

                if joystick1.get_button(5) == 1:
                    player1.pushingRightDash = True

                if len(playerList) > 1 and joystick_count > 1:
                    
                    if joystick2.get_button(0) == 1:
                        player2.pushingUp = True

                    if joystick2.get_button(1) == 1:
                        player2.pushingDown = True

                    if joystick2.get_button(2) == 1:
                        player2.pushingAttack1 = True

                    if joystick2.get_button(4) == 1:
                        player2.pushingLeftDash = True

                    if joystick2.get_button(5) == 1:
                        player2.pushingRightDash = True

            elif Event.type == JOYBUTTONUP:

                if joystick1.get_button(0) == 0:
                    player1.pushingUp = False 

                if joystick1.get_button(2) == 0:
                    player1.pushingDown = False

                if len(playerList) > 1 and joystick_count > 1:
                    
                    if joystick2.get_button(0) == 0:
                        player2.pushingUp = False

                    if joystick2.get_button(2) == 0:
                        player2.pushingDown = False

        if joystick_count > 0:  
            if joystick1.get_button(6) == 1 and joystick1.get_button(7) == 1:
                    quit()
                    sys.exit()
                    
            if joystick2.get_button(6) == 1 and joystick2.get_button(7) == 1:
                    quit()
                    sys.exit()

            if joystick1.get_button(6) == 1 and fullScreenBool == True:
                    screen = display.set_mode((SCREEN_WIDTH,SCREEN_HEIGHT))
                    fullScreenBool = False
                    

            if joystick1.get_button(6) == 1 and fullScreenBool == False:
                    screen = display.set_mode((\
                        SCREEN_WIDTH,SCREEN_HEIGHT), FULLSCREEN)
                    fullScreenBool = True
                    
            if joystick2.get_button(6) == 1 and fullScreenBool == True:
                    screen = display.set_mode((SCREEN_WIDTH,SCREEN_HEIGHT))
                    fullScreenBool = False
                    

            if joystick2.get_button(6) == 1 and fullScreenBool == False:
                    screen = display.set_mode((\
                        SCREEN_WIDTH,SCREEN_HEIGHT), FULLSCREEN)
                    fullScreenBool = True
                    
                    

        #Movement
                 
        #(Player 1) A (Left)
        if player1.pushingLeft == True and player1.pushingRight == False:
            if player1.character.status != "dashing":
                player1.character.moveLeft()
                
        #(Player 1) D (Right)
        if player1.pushingRight == True and player1.pushingLeft == False:
            if player1.character.status != "dashing":
                player1.character.moveRight()

        #(Player 1) W (Up)
        if player1.pushingUp == True:
            player1.pushingUp = False
            player1.character.jump()

        #(Player 1) S (Down)
        if player1.pushingDown == True and player1.character.status == "idle":
            player1.character.isCrouched = True
        else:
            player1.character.isCrouched = False

        #(Player 1) CapsLock/F (Dash)
        if player1.pushingRightDash == True:
            player1.pushingRightDash = False
            player1.character.rightDash()
        if player1.pushingLeftDash == True:
            player1.pushingLeftDash = False
            player1.character.leftDash()

        #(Player 1) E (Attack 1)
        if player1.pushingAttack1 == True:
            player1.pushingAttack1 = False
            player1.character.attack()

        if len(playerList) > 1:
            #(Player 2) RightArrow (Right)
            if player2.pushingRight == True and player2.pushingLeft == False:
                if player2.character.status != "dashing":
                    player2.character.moveRight()

            #(Player 2) LeftArrow (Left)
            if player2.pushingLeft == True and player2.pushingRight == False:
                if player2.character.status != "dashing":
                    player2.character.moveLeft()

            #(Player 2) UpArrow (Up)
            if player2.pushingUp == True:
                player2.pushingUp = False
                player2.character.jump()

            #(Player 2) DownArrow (Down)
            if player2.pushingDown == True and \
            player2.character.status == "idle":
                player2.character.isCrouched = True
            else:
                player2.character.isCrouched = False

            #(Player 2) LeftCtrl/Keypad0 (Dash)0.
            if player2.pushingRightDash == True:
                player2.pushingRightDash = False

                player2.character.rightDash()
            if player2.pushingLeftDash == True:
                player2.pushingLeftDash = False
                player2.character.leftDash()

            #(Player 2) RightShift (Attack 1):
            if player2.pushingAttack1 == True:
                player2.pushingAttack1 = False
                player2.character.attack()

        #Draws Background
        screen.blit(background,(0,0))
        healthBar.drawHealth()
        powerBar.drawPowerBar(player1.character.power,player2.character.power)
        timer.drawTimer()

        #Updates Player
        for item in playerList:
            item.character.update()

        #Updates Player Halo
        system.updateHalo()

        #If Win
        if timer.countDown == 0 or healthBar.p1H <= 200 or healthBar.p2H <= 0:
            #Calls back to the system class method
            system.gameWinScreen()

        #Locks FPS
        time.Clock().tick(FPS)

        #Updates screen
        display.flip()
